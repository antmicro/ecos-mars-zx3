<!-- {{{ Banner                         -->

<!-- All of the documentation and software included in the second BSD Networking     -->
<!-- Software Release is copyrighted by The Regents of the University of California. -->

<!-- Copyright 1979, 1980, 1983, 1986, 1988, 1989, 1991 The Regents of the           -->
<!-- University of California.                                                       -->
<!-- All rights reserved.                                                            -->

<!-- Redistribution and use in source and binary forms, with or without              -->
<!-- modification, are permitted provided that the following conditions              -->
<!-- are met:                                                                        -->
<!-- 1. Redistributions of source code must retain the above copyright               -->
<!--    notice, this list of conditions and the following disclaimer.                -->
<!-- 2. Redistributions in binary form must reproduce the above copyright            -->
<!--    notice, this list of conditions and the following disclaimer in the          -->
<!--    documentation and/or other materials provided with the distribution.         -->
<!-- 3. Neither the name of the University nor the names of its contributors         -->
<!--    may be used to endorse or promote products derived from this software        -->
<!--    without specific prior written permission.                                   -->

<!-- THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND         -->
<!-- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE           -->
<!-- IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE      -->
<!-- ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE        -->
<!-- FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      -->
<!-- DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS         -->
<!-- OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)           -->
<!-- HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT      -->
<!-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY       -->
<!-- OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF          --> 
<!-- SUCH DAMAGE.                                                                    -->

<!-- =============================================================== -->
<!--                                                                 -->
<!--     openbsd_netintro.sgml                                       -->
<!--                                                                 -->
<!--     eCos TCP/IP Stacks                                          -->
<!--                                                                 -->
<!-- =============================================================== -->
<!-- ####ECOSDOCCOPYRIGHTBEGIN####                                       -->
<!-- ===============================================================     -->
<!-- Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc. -->
<!-- This material may be distributed only subject to the terms          -->
<!-- and conditions set forth in the Open Publication License, v1.0      -->
<!-- or later (the latest version is presently available at              -->
<!-- http://www.opencontent.org/openpub/)                                -->
<!-- Distribution of the work or derivative of the work in any           -->
<!-- standard (paper) book form is prohibited unless prior               -->
<!-- permission obtained from the copyright holder                       -->
<!-- ===============================================================     -->
<!-- ####ECOSDOCCOPYRIGHTEND####                                         -->
<!-- =============================================================== -->
<!-- #####DESCRIPTIONBEGIN####                                       -->
<!--                                                                 -->
<!-- ####DESCRIPTIONEND####                                          -->
<!-- =============================================================== -->

<!-- }}} -->

<SECT1 id="openbsd-manpages-netintro">
<TITLE>OpenBSD networking facilities</TITLE>
<SCREEN>

NAME
     networking - introduction to networking facilities

SYNOPSIS
     #include &lt;sys/socket.h>
     #include &lt;net/route.h>
     #include &lt;net/if.h>

DESCRIPTION
     This section is a general introduction to the networking facilities
     available in the system.  The general introduction on this page is 
     broken up into three areas: protocol families (domains), protocols, 
     and network interfaces.

     All network protocols are associated with a specific protocol family. A
     protocol family provides basic services to the protocol implementation 
     to allow it to function within a specific network environment.  These 
     services may include packet fragmentation and reassembly, routing, 
     addressing, and basic transport.  A protocol family may support multiple 
     methods of addressing, though the current protocol implementations do not.
     A protocol family is normally comprised of a number of protocols, one per
     <link linkend="net-common-tcpip-manpages-socket">socket</link> type. It is not required that a protocol family support all
     socket types.  A protocol family may contain multiple protocols support-
     ing the same socket abstraction.

     A protocol supports one of the socket abstractions detailed in <link linkend="net-common-tcpip-manpages-socket">socket</link>.
     A specific protocol may be accessed either by creating a socket of the
     appropriate type and protocol family, or by requesting the protocol ex-
     plicitly when creating a socket.  Protocols normally accept only one type
     of address format, usually determined by the addressing structure inher-
     ent in the design of the protocol family/network architecture.  Certain
     semantics of the basic socket abstractions are protocol specific.  All
     protocols are expected to support the basic model for their particular
     socket type, but may, in addition, provide non-standard facilities or ex-
     tensions to a mechanism.  For example, a protocol supporting the
     SOCK_STREAM abstraction may allow more than one byte of out-of-band data
     to be transmitted per out-of-band message.

     A network interface is similar to a device interface.  Network interfaces
     comprise the lowest layer of the networking subsystem, interacting with
     the actual transport hardware.  An interface may support one or more pro-
     tocol families and/or address formats. 

PROTOCOL
     The system currently supports the Internet protocols. Raw socket interfaces
     are provided to the IP protocol layer of the Internet. 

ADDRESSING
     Associated with each protocol family is an address format.  All network
     addresses adhere to a general structure, called a sockaddr, described be-
     low.  However, each protocol imposes a finer, more specific structure,
     generally renaming the variant, which is discussed in the protocol family
     manual page alluded to above.

           struct sockaddr {
                   u_int8_t        sa_len;
                   sa_family_t     sa_family;
                   char            sa_data[14];
           };

     The field sa_len contains the total length of the structure, which may
     exceed 16 bytes.  The following address values for sa_family are known to
     the system (and additional formats are defined for possible future imple-
     mentation):

     #define    AF_UNIX      1    /* local to host (pipes, portals) */
     #define    AF_INET      2    /* internetwork: UDP, TCP, etc. */
     #define    AF_NS        6    /* Xerox NS protocols */
     #define    AF_CCITT     10   /* CCITT protocols, X.25 etc */
     #define    AF_HYLINK    15   /* NSC Hyperchannel */
     #define    AF_APPLETALK 16   /* AppleTalk */
     #define    AF_ISO       18   /* ISO protocols */
     #define    AF_IPX       23   /* Novell Internet Protocol */
     #define    AF_INET6     24   /* IPv6 */
     #define    AF_NATM      27   /* native ATM access */

ROUTING
     OpenBSD provides some packet routing facilities.  The kernel maintains a
     routing information database, which is used in selecting the appropriate
     network interface when transmitting packets.

     This facility is however, untested in eCos ports.

INTERFACES
     Each network interface in a system corresponds to a path through which
     messages may be sent and received.  A network interface usually has a
     hardware device associated with it, though certain interfaces such as the
     loopback interface, lo, do not.

     The following ioctl calls may be used to manipulate network interfaces
     The ioctl is made on a socket (typically of type SOCK_DGRAM) in the desired
     domain.  Most of the requests supported in earlier releases take an ifreq 
     structure as its parameter.  This structure has the form

     struct  ifreq {
     #define    IFNAMSIZ    16
             char    ifr_name[IFNAMSIZ];         /* if name, e.g. "en0" */
             union {
                     struct    sockaddr ifru_addr;
                     struct    sockaddr ifru_dstaddr;
                     struct    sockaddr ifru_broadaddr;
                     short     ifru_flags;
                     int       ifru_metric;
                     caddr_t   ifru_data;
             } ifr_ifru;
     #define ifr_addr      ifr_ifru.ifru_addr    /* address */
     #define ifr_dstaddr   ifr_ifru.ifru_dstaddr /* other end of p-to-p link */
     #define ifr_broadaddr ifr_ifru.ifru_broadaddr /* broadcast address */
     #define ifr_flags     ifr_ifru.ifru_flags   /* flags */
     #define ifr_metric    ifr_ifru.ifru_metric  /* metric */
     #define ifr_media     ifr_ifru.ifru_metric  /* media options (overload) */
     #define ifr_data      ifr_ifru.ifru_data    /* for use by interface */
     };

     Calls which are now deprecated are:

     SIOCSIFADDR     Set interface address for protocol family.  Following the
                     address assignment, the ``initialization'' routine for
                     the interface is called.

     SIOCSIFDSTADDR  Set point to point address for protocol family and inter-
                     face.

     SIOCSIFBRDADDR  Set broadcast address for protocol family and interface.

     ioctl requests to obtain addresses and requests both to set and retrieve
     other data are still fully supported and use the ifreq structure:

     SIOCGIFADDR     Get interface address for protocol family.

     SIOCGIFDSTADDR  Get point to point address for protocol family and inter-
                     face.

     SIOCGIFBRDADDR  Get broadcast address for protocol family and interface.

     SIOCSIFFLAGS    Set interface flags field.  If the interface is marked
                     down, any processes currently routing packets through the
                     interface are notified; some interfaces may be reset so
                     that incoming packets are no longer received.  When
                     marked up again, the interface is reinitialized.

     SIOCGIFFLAGS    Get interface flags.

     SIOCSIFMEDIA    Set interface media.  See ifmedia(4) for possible values.

     SIOCGIFMEDIA    Get interface media.  See ifmedia(4) for interpreting
                     this value.

     SIOCSIFMETRIC   Set interface routing metric.  The metric is used only by
                     user-level routers.

     SIOCGIFMETRIC   Get interface metric.

     There are two requests that make use of a new structure:

     SIOCAIFADDR     An interface may have more than one address associated
                     with it in some protocols.  This request provides a means
                     to add additional addresses (or modify characteristics of
                     the primary address if the default address for the ad-
                     dress family is specified).  Rather than making separate
                     calls to set destination or broadcast addresses, or net-
                     work masks (now an integral feature of multiple proto-
                     cols) a separate structure is used to specify all three
                     facets simultaneously (see below).  One would use a
                     slightly tailored version of this struct specific to each
                     family (replacing each sockaddr by one of the family-spe-
                     cific type).  Where the sockaddr itself is larger than
                     the default size, one needs to modify the ioctl(2) iden-
                     tifier itself to include the total size, as described in
                     ioctl(2).

     SIOCDIFADDR     This request deletes the specified address from the list
                     associated with an interface.  It also uses the
                     if_aliasreq structure to allow for the possibility of
                     protocols allowing multiple masks or destination address-
                     es, and also adopts the convention that specification of
                     the default address means to delete the first address for
                     the interface belonging to the address family in which
                     the original socket was opened.

     SIOCGIFCONF     Get interface configuration list.  This request takes an
                     ifconf structure (see below) as a value-result parameter.
                     The ifc_len field should be initially set to the size of
                     the buffer pointed to by ifc_buf.  On return it will con-
                     tain the length, in bytes, of the configuration list.
                     Alternately, if the ifc_len passed in is set to 0,
                     SIOCGIFCONF will set ifc_len to the size that ifc_buf
                     needs to be to fit the entire configuration list and not
                     fill in the other parameters.  This is useful for deter-
                     mining the exact size that ifc_buf needs to be in ad-
                     vance.  Note, however, that this is an extension that not
                     all operating systems support.

     /*
     * Structure used in SIOCAIFADDR request.
     */
     struct ifaliasreq {
             char    ifra_name[IFNAMSIZ];   /* if name, e.g. "en0" */
             struct  sockaddr        ifra_addr;
             struct  sockaddr        ifra_broadaddr;
             struct  sockaddr        ifra_mask;
     };

     /*
     * Structure used in SIOCGIFCONF request.
     * Used to retrieve interface configuration
     * for machine (useful for programs which
     * must know all networks accessible).
     */
     struct ifconf {
             int   ifc_len;          /* size of associated buffer */
             union {
                     caddr_t    ifcu_buf;
                     struct     ifreq *ifcu_req;
             } ifc_ifcu;
     #define ifc_buf ifc_ifcu.ifcu_buf /* buffer address */
     #define ifc_req ifc_ifcu.ifcu_req /* array of structures returned */
     };

SEE ALSO
     <link linkend="openbsd-manpages-bridge">bridge</link>, <link linkend="openbsd-manpages-stp">spanning-tree</link>

</SCREEN>
</SECT1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:("tcpip.sgml" "book" "chapter")
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-doctype:"book"
End:
-->

