2010-03-29  Oyvind Harboe  <oyvind.harboe@zylin.com>
            Jonathan Larmour  <jifl@eCosCentric.com>

	* src/ramfs.c (add_direntry): Fix directory file name corruption
	with the SIMPLE allocation method: do not cache pointers returned
	from findbuffer_node(), but do a fresh lookup based on position.

2010-02-27  Sergei Gavrikov  <sergei.gavrikov@gmail.com>

	* src/ramfs.c (find_entry): Fixed wrong type for a local counter
	(namelen): s/char/int/.

2009-04-28  John Dallaway  <john@dallaway.org.uk>

	cdl/ramfs.cdl: Use CYGPKG_IO_FILEIO as the parent.

2008-04-02  Xinghua Yang <yxinghua@sunnorth.com.cn>
            Taiyun  Wang <taiyun@sunnorth.com.cn>
	
	* cdl/ramfs.cdl: Use CYGPKG_FS_RAM_RET_DIRENT_DTYPE to control
	whether ram sets file type in ramfs_fo_dirread.
	* src/ramfs.c: Set file type in ramfs_fo_dirread.
	* tests/ramfs1.c: Test the new d_type in dirent when present.
	
2006-10-05  Andrew Lunn  <andrew.lunn@ascom.ch
	    Paluch Sebastian <the_sorcerer&op.pl>
	
	* test/ramfs3 (new): Test for lseek bug found in fileio.
	* cdl/ramfs.cdl: Build new test.
	
2006-06-25  Andrew Lunn  <andrew.lunn@ascom.ch>

	* src/ramfs.c (find_direntry): Don't search off the end of the
	directory node into hyperspace.
	* src/ramfs.c (ramfs_getinfo): Support for block usage call.
	* tests/ramfs1.c (main): Add file system block usage test. 

2006-05-17  Andy Jackson  <andy@grapevinetech.co.uk>

	* tests/ramfs1.c (createfile): Fix compile warnings.

2005-10-01  Andrew Lunn   <andrew.lunn@ascom.ch>

	* src/ramfs.c: Implement holes in files when using BLOCK
	allocation method. This requires allowing lseek to go past the end
	of the file.

	* test/ramfs2.c: Extended the lseek test to now seek past the end
	of the file. With the BLOCK allocation method this will create a
	whole. With the SIMPLE allocation method is just allocates the
	memory and fills it with zero.

	* cdl/ramfs.cdl: Added in interface which both SIMPLE and BLOCK
	implement. This allows the inference engine to work out is should
	enable BLOCK if SIMPLE is disabled by the user.

2005-10-01  Dan Jakubiec  <dan.jakubiec@systech.com>

	* src/ramfs.c: (ramfs_mount, ramfs_open, ramfs_mkdir) Changed the
	permissions for files and directories created on RAMFS file systems
	from 000 to 777. This helps ported applications which wrongly
	assume there is some security concept and check for the existence
	of certain file permissions.

2005-03-27  Andrew Lunn  <andrew.lunn@ascom.ch>

	* tests/ramfs1.c (SHOW_RESULT): Fixed compiler warning about format
	not matching type.

2004-12-13  John Dallaway  <jld@ecoscentric.com>

	* tests/fileio1.c: Rename to ramfs1.c. eCos test names should be
	unique.
	* tests/fseek1.c: Rename to ramfs2.c:
	* cdl/ramfs.cdl: Build the renamed tests.

2004-03-29  Andrew Lunn  <andrew.lunn@ascom.ch>

        * test/fseek1.c: Test the fseek/ftell functions
        * cdl/ramfs.cdl: Added a fseek1 test to the build

2004-03-15  Sebastien Couret <sebastien.couret@elios-informatique.fr>

	* src/ramfs.c (block_init): Fixed compiler warning.

2004-02-20  Vincent Catros  <Vincent.Catros@elios-informatique.fr>

	* src/ramfs.c :
	(ramfs_find) Policy to skip path separator is no longer
	"if '/' then skip" but "while '/' then skip" allowing
	multi '/' separators (i.e : /tmp////foo).
	(find_entry) Policy to detect end of path is no longer
	"if '\0' then end_of_path"
	but "while '/' skip it and then if '\0' then end_of_path"
	allowing path terminated with any number of '/'
	(i.e : chdir(/tmp///)).

2004-02-25  Jonathan Larmour  <jifl@eCosCentric.com>

	* src/ramfs.c (findbuffer_node): If pos larger than even INDIRECT2_MAX
	then return ENOSPC, not EINVAL. Thanks to Vincent Catros for spotting
	this.

2004-01-08  Vincent Catros  <Vincent.Catros@elios-informatique.fr>

	* src/ramfs.c (ramfs_fo_write): Return ENOSPC when the filesystem
	is full.

2003-02-24  Jonathan Larmour  <jifl@eCosCentric.com>

	* cdl/ramfs.cdl: Fix doc link.

2002-12-06  Andrew Lunn  <andrew.lunn@ascom.ch>

	* cdl/ramfs.cdl: Implements the CYGINT_IO_FILEIO_FS interface

2002-01-25  Jonathan Larmour  <jlarmour@redhat.com>

	* tests/fileio1.c (main): Check in listdir that the number of 
	dirents is correct.

2001-07-26  Jonathan Larmour  <jlarmour@redhat.com>

	* src/ramfs.c (findbuffer_indirect1): Determine correct offset in
	indirect block list.
	(findbuffer_indirect2): Ditto.
	(findbuffer_direct): Compare block index with number of blocks
	correctly.

2000-10-05  Nick Garnett  <nickg@cygnus.co.uk>

	* tests/fileio1.c:
	Extended to check getcwd() and chdir() functionality more fully.

2000-08-18  Nick Garnett  <nickg@cygnus.co.uk>

	* cdl/ramfs.cdl:
	* src/ramfs.c:
	* tests/fileio1.c:
	Created this example RAM filesystem both as a usable filesystem
	and as an example of how to build filesystems for the fileio
	infrastructure.



//===========================================================================
// ####GPLCOPYRIGHTBEGIN####                                                
// -------------------------------------------                              
// This file is part of eCos, the Embedded Configurable Operating System.   
// Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2009 Free Software Foundation, Inc.
//
// This program is free software; you can redistribute it and/or modify     
// it under the terms of the GNU General Public License as published by     
// the Free Software Foundation; either version 2 or (at your option) any   
// later version.                                                           
//
// This program is distributed in the hope that it will be useful, but      
// WITHOUT ANY WARRANTY; without even the implied warranty of               
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU        
// General Public License for more details.                                 
//
// You should have received a copy of the GNU General Public License        
// along with this program; if not, write to the                            
// Free Software Foundation, Inc., 51 Franklin Street,                      
// Fifth Floor, Boston, MA  02110-1301, USA.                                
// -------------------------------------------                              
// ####GPLCOPYRIGHTEND####                                                  
//===========================================================================
	

